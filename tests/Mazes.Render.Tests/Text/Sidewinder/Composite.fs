// Copyright 2020 Patrizio Amella. All rights reserved. See License file in the project root for more information.

module Mazes.Render.Tests.Text.Sidewinder.Composite

open System
open FsUnit
open Xunit
open Mazes.Core
open Mazes.Core.Canvas
open Mazes.Core.Grid
open Mazes.Core.Maze.Generate
open Mazes.Render

let savedCanvas =
    "Type=Canvas\n" +
    "...........*..*...............*************.........*******..............\n" +
    "...........**.*..............***************....***********..............\n" +
    "..*******...***..............***************..******......*.....*........\n" +
    ".....*........*.*.*.*........***************..***.........*.....*........\n" +
    ".....*******************.....******..*******.....*******************.....\n" +
    "..****.*.*.*******.*.*.****..******..*******..****.*.*.*******.*.*.****..\n" +
    ".***********.....***********.***************.***********.....***********.\n" +
    "**************.*******************************************.**************\n" +
    ".***********.....***********.******..*******.***********.....***********.\n" +
    "..****.*.*.*******.*.*.****..******..*******..****.*.*.*******.*.*.****..\n" +
    ".....*******************.....***************.....*******************.....\n" +
    "......**..**..*.*.*.*........***************........*.....*.**...........\n" +
    "......**..**..*.....*........***************........*.....*.**...........\n" +
    "......******..*.....********************************......*.**...........\n" +
    "......******..*...............*************...............*..............\n" +
    "end"

let canvas =
    match Canvas.Convert.fromString savedCanvas with
    | Some canvas -> canvas
    | None -> raise(Exception "The saved canvas is not correct")

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Top, Right, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Top Right (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ┬ ╶───╮ ╭───╴ ┬ ┬ ┬ ┬ ╶─┺━┓       ┏━━━━━━━┛ ┬ ┬ ┬ ┬ ┬ ┬ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┠─╴ ├───╴ │ ╰─────┤ ╰─┤ ╰─╮ ┬ ┃   ┏━━━┛ ╶─────┲━┷━┷━┷━┷━┷━┪ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ┬ ├─╴ ╶─┴─╮ ╭───╯ ╶─┴───┴─┴─┨   ┠─╴ ┬ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ ╰─┼─╴ ╶───╆━┷━┓ ╭─╴ ╭─╴ ┬ ┬ ┃   ┗━━━┷━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱─╴ ╶───╮ ╭─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ ╶─┼─╴ ┬ ╶─┨   ┃ ├─╴ ├─╴ │ ╰─┨   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╭─╴ ╭─╴ ┬ ╶─┲━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┛ ╭─╴ ╶─┺━┛ ┗━┛ ┗━┛ ┏━━━━━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╶─┬─╴ ┗━┓ ┃ ╶─┼─╴ ╰───┺━━━┛ │ ╶─┼─╴ ╰───┨ ┏━┛ ╭───╴ ┗━┛ ┗━┛ ┗━┛ ┢━━━┷━━━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╭─╴ ┬ ┗━┓  \n" +
        "┏━┛ ╶─┴─╮ ╭─╴ ╶───╮ ╶─╮ ┗━━━┓ ┏━━━┛ ┬ ┬ ╶───╮ ╶─╮ ╰─╮ ┬ ┗━┛ ╶─┴─────╮ ┬ ╶───┤ ┬ ╰─────╮ ┗━┛ ╶─┼─╴ ┬ ┬ ╶─╮ ╭─╴ ┬ ┗━━━┓ ┏━━━┛ ╭─╴ ┬ ╶─╮ ╶─┴───┤ ┬ ┗━┓\n" +
        "┗━┓ ╶─╮ │ │ ┬ ╶─╮ ╰───┴─┲━━━┛ ┗━━━┱─╯ │ ╭───╯ ╶─┤ ┬ ╰─┤ ┏━┱─╴ ╶─────┤ ┢━━━┓ │ ├─────╴ │ ┏━┓ ╶─┼─╴ ╰─┤ ┬ ╰─┤ ┬ │ ┏━━━┛ ┗━━━┓ │ ╶─┼───┴─────╴ ├─╯ ┏━┛\n" +
        "  ┗━┓ ├─╯ │ ┢━┓ ┢━┓ ┏━┓ ┗━━━━━━━━━┛ ┏━┪ ┢━┓ ┏━┱─╯ │ ╶─╆━┛ ┃ ╶───╮ ╭─╯ ┃   ┃ ├─┴─╴ ┬ ╭─╯ ┃ ┗━┓ │ ╭─╴ ┢━┪ ┏━┪ ┢━┪ ┗━━━━━━━━━┛ ┢━┓ ┢━┓ ┏━┱─╴ ┬ │ ┏━┛  \n" +
        "    ┗━┷━━━┪ ┗━┛ ┗━┛ ┗━┛ ┬ ╶───╮ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━┛   ┃ ┬ ╶─┤ │ ┬ ┗━━━┛ │ ┬ ┬ │ │ ┬ ┃   ┗━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╶───────╮ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━┷━┷━┛    \n" +
        "          ┗━┓ ┬ ┏━━━┱─╴ ┢━━━┓ ┢━┪ ┢━┓ ┏━┓ ┏━━━━━┛         ┃ ╰───┤ │ ├─╴ ┬ ╭─╯ ╰─┤ ├─╯ │ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━╅─╯ ┏━━━━━━━━━━━┛          \n" +
        "            ┠─╯ ┃   ┃ ┬ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┠───╴ ╰─┤ ├─╴ ╰─┴─╮ ╶─┤ │ ╶─┤ ┃               ┃ ┃         ┃ ┃ ┃ ╶─┨                      \n" +
        "            ┃ ┬ ┗━━━┛ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ┬ ┬ ╶─┤ ├─╴ ╶─╮ │ ┬ │ │ ┬ │ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┠─┴─╴ ┬ ┬ ╰─┨   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┪ │ ┬ ╰─┼─╴ ┬ │ │ │ │ │ │ ┢━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━┷━┷━━━┛   ┗━┛                             ┗━┷━┷━━━┷━━━┷━┷━┷━┷━┷━┷━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Top, Left, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Top Left (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ┬ ┬ ╶─────╮ ┬ ┬ ╭───╴ ┬ ┗━┓       ┏━━━━━━━┛ ╶───┬───╴ ╶─┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┬ │ ╰─╮ ╶─╮ ╰─┴─┴─┼───╴ ├─╴ ┃   ┏━━━┛ ┬ ╭─╴ ┏━━━━━┷━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ╰─┴───┴───┴─────╮ ├───╴ ╰───┨   ┃ ┬ ┬ ┢━┷━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┠─╴ ╶───╮ ╶─┲━━━┱─┴─╯ ╶───╮ ┬ ┃   ┗━┷━┷━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱───╴ ┬ ┬ ╶─╮ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┠─╴ ┬ ╶─┴─╮ ┃   ┃ ┬ ╶───╮ │ │ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱─╴ ╶───────╮ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┹─────╴ ┗━┛ ┗━┛ ┗━┛ ┏━━━┷━┷━━━┪ ┗━┛ ┗━┛ ┗━┛ ╶─────┺━┓ ┃ ┬ ╰─╮ ┬ ╰─┺━━━┛ │ ╶─┬─╯ │ ╰─┨ ┏━┹─╴ ╶─╮ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━━━━━┪ ┗━┛ ┗━┛ ┗━┛ ╭───╴ ┗━┓  \n" +
        "┏━┛ ┬ ╶─┬─╴ ╭─╴ ╶─┬─╴ ┬ ┗━━━┓ ┏━━━┛ ╶─╮ ╭─╴ ╭─╴ ╶───╮ ╶─┺━┛ │ ┬ ╰─┴─╮ ┬ ╶───┴───┤ ┬ │ ╶─┺━┛ ╶─╮ ╶─┴─╮ ┬ ┬ ┬ ╶───┺━━━┓ ┏━━━┹─╴ ╶─╮ ┬ ╶───┤ ╭───╴ ┗━┓\n" +
        "┗━┱─╯ ╶─┴───┤ ┬ ┬ │ ┬ │ ┏━━━┛ ┗━━━┓ ┬ ├─╯ ╶─┤ ╶───┬─┴─╴ ┏━┓ │ │ ╶─╮ ╰─╆━━━┓ ╶─╮ │ ╰─┤ ┬ ┏━┱─╴ ╰─╮ ╭─┴─┴─┴─┴───╴ ┏━━━┛ ┗━━━┱─╴ ┬ │ │ ┬ ┬ ╰─┤ ┬ ╶─┲━┛\n" +
        "  ┗━┓ ┬ ╭─╴ ┢━┪ ┢━┪ ┢━┪ ┗━━━━━━━━━┛ ┢━┪ ┏━┓ ┢━┓ ┬ │ ┬ ┏━┛ ┃ │ ├─╴ │ ┬ ┃   ┃ ┬ │ ╰───┴─┤ ┃ ┗━┱─╴ │ │ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━━━━━┛ ┏━┪ ┢━┪ ┢━┪ ╭─╯ │ ┏━┛  \n" +
        "    ┗━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ╶───────┺━┛ ┗━┛ ┗━┛ ┢━┷━┷━┛   ┃ │ │ ┬ │ │ ┗━━━┛ │ │ ┬ ┬ ╶─┤ ┃   ┗━━━┷━┪ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ┬ ╶───╮ ┗━┛ ┗━┛ ┗━┛ ┢━━━┷━┛    \n" +
        "          ┗━┱─╴ ┏━━━┓ ┬ ┢━┷━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ ├─╯ ╰─┤ ╭─╴ ┬ │ │ ╰─┴─╮ │ ┃         ┗━━━━━┓ ┏━━━━━┷━┷━┪ ┏━┓ │ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ ┬ ┃   ┃ ╰─┨   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ │ ╰─╮ ┬ ╰─┼─╴ ╰─┴─┤ ╭───╯ ╰─┨               ┃ ┃         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ │ ┗━━━┛ ┬ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ │ ┬ │ │ ╭─╯ ╶─╮ ┬ ╰─┤ ┬ ┬ ╶─┺━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ │ ┬ ┬ ┬ │ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┪ │ ├─╯ │ ╶─╮ ├─┴───╯ ╰─┤ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━┷━┛                      \n" +
        "            ┗━┷━┷━┷━┷━┷━┛   ┗━┛                             ┗━┷━┷━━━┷━━━┷━┷━━━━━━━━━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Bottom, Right, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Bottom Right (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━┯━━━━━┯━┯━━━━━┯━┯━┯━┯━┓                 ┏━━━━━┯━┯━┯━┯━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━╃─╴ │ ╶─┬─╯ ╰─┬─╴ ┴ ┴ │ ┴ ┡━┓       ┏━┯━┯━┯━┛ ╶───╯ ┴ ┴ ┴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ├─╮ ╰─╴ ╰─┬─╮ ┴ ╶─────╯ ╶─╯ ┃   ┏━━━┩ ┴ ┴ ┴ ┏━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ┴ ╰─╴ ╶───╯ ╰───╴ ╶─────┬───┨   ┠─╴ ┴ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━┯━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┠─╮ ╭─────┬─┲━━━┓ ╭─────┬─┴─╮ ┃   ┗━━━━━╋━━━━━━━━━━━━━┯━━━┛ ┡━━━┯━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━┯━━━┛ ┏━┓ ┏━┓ ┏━┓ ┴ ╶─────────┲━┓ ┏━┓ ┏━┓ ┗━━━┯━┓   ┃ │ ┴ ╭───┤ ┃   ┃ ┴ ╶─┬─┼─╴ │ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╰───╴ ╰─╴ ┴ ┏━┓ ┏━┓ ┏━┓ ┗━┯━━━┓    \n" +
        "  ┏━┛ ╰───╮ ┗━┛ ┡━┩ ┗━┛ ┏━━━━━━━━━┓ ┗━┩ ┗━┛ ┗━╃─╴ ╭─┤ ┡━┓ ┃ ╰─╴ ┴ ╭─╯ ┡━━━╃─╮ ╭─╯ ┴ ╶─╯ ┃ ┏━┹─┬───╴ ┡━┩ ┗━┛ ┗━┩ ┏━━━━━━━━━┓ ┗━┛ ┡━┛ ┡━╃─╴ ├─╮ ┗━┓  \n" +
        "┏━┹─┬───╮ ╰─┬─╴ │ ╰─╴ ╶─┺━━━┓ ┏━━━┛ ╭─┴─╮ ╭─┬─┤ ╭─╯ │ ┴ ┗━┛ ╶───┬─┤ ╶─╯ ╶─╯ │ ├───┬─┬─╴ ┗━┹─╮ ┴ ╭─┬─╯ ┴ ╶─┬───╯ ┗━━━┓ ┏━━━┹─╴ ╶─┼─╮ ┴ │ ╭─┤ ├─╮ ┗━┓\n" +
        "┗━┓ ╰─╴ ╰─╴ ┴ ╶─╯ ╶─────┲━━━┛ ┗━━━┓ ┴ ╶─╯ ┴ ┴ ┴ │ ╭─┤ ╶─┲━┱─┬─╴ ┴ ┴ ╭─┲━━━┓ ┴ ┴ ╭─┤ ┴ ╭─┲━┓ ┴ ╶─╯ ├─────╴ ┴ ╶───┲━━━┛ ┗━━━┱─╴ ╶─╯ ┴ ╶─╯ │ │ ┴ ┴ ┏━┛\n" +
        "  ┗━┓ ╶─────┲━┓ ┏━┓ ┏━┓ ┗━┯━━━━━┯━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ┴ ┏━┛ ┃ │ ╶───┬─╯ ┃   ┠───╮ │ ├─╮ │ ┃ ┗━┱─╴ ╶─╯ ┏━┓ ┏━┓ ┏━┓ ┡━┯━━━┯━━━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ╶─┲━┛  \n" +
        "    ┗━━━━━┓ ┗━┩ ┗━┛ ┗━┹─╴ ┴ ╶───╯ ┴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ ├─┬─╮ ╰─╮ ┡━┯━┹─╮ │ ┴ ┴ │ │ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ╰─╴ ┴ ╶─┤ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ │ ┏━━━┱─╴ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ ┴ ┴ │ ╭─╯ ┴ ╰─╮ ┴ ├─╮ ╶─┤ │ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ │ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ │ ┃   ┠─╮ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┠───╮ ┴ ├─╮ ╶───┤ ╭─┤ │ ╭─┤ │ ┃               ┃ ┃         ┃ ┃ ┃ ┴ ┃                      \n" +
        "            ┃ │ ┗━┯━┩ ┴ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╶─┤ ╭─╯ ├─╴ ╭─┤ │ │ │ │ │ ┴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ╶─┨                      \n" +
        "            ┃ ╰─╴ ┴ ┴ ╶─┨   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ┴ ┴ ╶─┴─╴ ┴ ┴ ┴ ┴ ┴ ┴ ┴ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Bottom, Left, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Bottom Left (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━┯━━━━━━━┯━┯━┯━┯━━━━━┯━━━┓                 ┏━━━━━┯━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ │ ╶─┬───╯ ┴ │ ╰───╮ ┴ ╭─┺━┓       ┏━┯━━━┯━┹───╴ ╰───╴ ╶─┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┠─╴ ┴ ╶─╯ ╶─┬─┬─┴───╴ ├─╮ ├─╴ ┃   ┏━━━┛ ╰─╴ ┴ ┏━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┠───╴ ╭─────╯ ╰─╴ ╶───┤ │ ┴ ╭─┨   ┃ ╶───┲━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━┯━┛ ┗━┩ ┡━┛ ┗━┛ ┗━━━━━┓         ┃ ╶─┬─╯ ╶─┬─┲━━━┱─┬─╴ ┴ │ ╭─╯ ┃   ┗━━━━━╋━━━━━━━━━━━━━━━━━┛ ┗━┯━┯━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━┯━┛ ┏━┓ ┏━┓ ┏━┱─╴ ╰───╴ ┴ ┴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┠─╮ ┴ ╭─┬─╯ ┃   ┃ ┴ ╭───┤ ╰─╮ ┃   ┏━┯━━━┩ ┏━┓ ┏━┓ ┏━┱───────╴ ┴ ┴ ┏━┓ ┏━┓ ┏━┓ ┗━┯━┯━┓    \n" +
        "  ┏━┹─╮ ├─╴ ┡━┩ ┗━┩ ┗━┛ ┏━━━━━━━━━┓ ┡━┛ ┗━┛ ┡━╃─────╮ ┗━┓ ┃ ┴ ╶─╯ ┴ ╭─╄━┯━┛ ╭─╯ ╭─┴─╴ ┴ ┃ ┏━┩ │ ╭─╯ ┡━┛ ┗━┛ ┡━┛ ┏━━━━━━━━━┓ ┗━┛ ┡━┩ ┗━┛ ╭─╯ ┴ ┗━┓  \n" +
        "┏━┹─╮ │ │ ╭─╯ ├─╮ ╰─╴ ╶─┺━━━┓ ┏━━━┛ ┴ ╭─────╯ │ ╭───┼─╴ ┗━┹─┬─┬───╴ │ ┴ ┴ ╶─╯ ╶─┤ ╭─────┺━┛ ┴ │ ┴ ╭─┼─╮ ╭─┬─╯ ╭─┺━━━┓ ┏━━━┹─╴ ╶─╯ ├───╮ ╰─┬───╮ ┗━┓\n" +
        "┗━┓ ┴ │ │ │ ╶─╯ ╰─╴ ╶───┲━━━┛ ┗━━━┱─╴ ╰─────╴ ┴ ┴ ╶─┤ ╶─┲━┓ ┴ ├─╮ ╶─╯ ┏━━━┱─╮ ╶─╯ ╰───╮ ┏━┱─╴ │ ╭─┤ ┴ ┴ ┴ ┴ ╶─╯ ┏━━━┛ ┗━━━┓ ╶─────╯ ╶─┴─╴ ╰─╮ ┴ ┏━┛\n" +
        "  ┗━┓ ┴ ┴ ┴ ┏━┓ ┏━┓ ┏━┓ ┗━┯━━━┯━┯━┩ ┏━┓ ┏━┓ ┏━┱─╴ ╶─╯ ┏━┛ ┠─╮ │ ├─┬─╮ ┃   ┃ │ ╶───┬───╯ ┃ ┗━┓ ┴ ┴ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━━━━━┯━━━┛ ┏━┓ ┏━┓ ┏━┱───╴ ┴ ┏━┛  \n" +
        "    ┗━━━━━┓ ┗━┩ ┗━┛ ┗━╃─╴ ╰─╴ ┴ ┴ ┴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ │ │ │ ┴ │ ┡━┯━┛ ╰─┬─╴ ├───╮ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ╶───┴─╴ ╶─┺━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ │ ┏━━━┓ │ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ ┴ │ ╶─╯ ┴ ├─┬─╴ ┴ ╶─┤ ╶─┤ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┱─╴ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ │ ┃   ┃ │ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ │ ╭─┼─╴ ╶─┬─┤ ╰─┬─╮ ╭─┼─╮ │ ┃               ┃ ┃         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┃ │ ┡━┯━┩ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ┴ ┴ ├─╮ ╶─╯ ┴ ╭─┤ ┴ │ ┴ ┴ ┴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┃ ┴ ┴ ┴ ┴ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ╶─╯ ╰───╴ ╶─╯ ╰─╴ ┴ ╶───┲━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Right, Top, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Right Top (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━┯━━━━━━━━━┯━━━┯━┯━━━┯━┓                 ┏━━━━━┯━┯━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┹─╴ ╰─┬───╴ ┬ ╰─╮ ┴ │ ┬ │ ┗━┓       ┏━┯━┯━━━┛ ┬ ┬ ┴ ┴ ╭─╴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┠─┬─╴ ┬ ┴ ╭─╴ │ ┬ ╰─╮ ╰─╯ ╰─╴ ┃   ┏━━━┛ ┴ ╰─╴ ┏━┷━┷━━━━━┷━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ │ ┬ │ ╭─┼───╯ │ ┬ │ ╭───┬─╴ ┃   ┃ ╭─╴ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━┯━┛ ┡━┛ ┡━┛ ┗━┛ ┗━━━━━┓         ┃ ╰─┼─╯ │ ┴ ┏━━━╅─╯ │ ├─╴ ┴ ┬ ┃   ┗━┷━━━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ╰─╴ ┴ ┬ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━━━┯━┓   ┠─╴ ╰───┴─╮ ┃   ┃ ┬ ├─┼─┬───┤ ┃   ┏━┯━━━┛ ┏━┓ ┏━┓ ┏━┱─────╴ ╭───╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━╃─────╴ ┗━┛ ┡━┛ ┡━┩ ┢━━━━━━━┷━┓ ┗━┩ ┗━┩ ┗━┩ ╰─╮ │ ┗━┓ ┃ ┬ ╭─╴ ┬ ┴ ┗━┯━┩ │ │ │ ╰─╮ │ ┃ ┏━┛ ╰───╴ ┗━┛ ┗━┩ ┗━┛ ┏━━━━━┷━━━┓ ┗━┩ ┗━┛ ┗━┹─────╮ ┗━┓  \n" +
        "┏━┛ ├─────────╴ ┴ ┬ │ ┴ ┗━━━┓ ┏━━━┛ ┬ ╰─╮ ├─╮ ├─╮ ┴ │ ┬ ┗━┹─┤ │ ┬ │ ┬ ┬ ┴ ╰─┤ ┴ ╰─╴ │ ┴ ┗━┹───╮ ┬ ┬ ╭───╴ ╰───╴ ┗━━━┓ ┏━━━┹─╮ ├─────╴ ┬ ╭─╮ ╰─╴ ┗━┓\n" +
        "┗━┓ ┴ ╭─────╴ ╭───╯ ╰─╴ ┏━━━┛ ┗━━━┓ ├─╴ ┴ ┴ ┴ ┴ ╰─╴ ├─╯ ┏━┓ ╰─┴─╯ ├─┤ ┢━━━┓ ├─────╮ ╰─╮ ┏━┓ ┬ ┴ ├─┴─┴───────╴ ┬ ┏━━━┛ ┗━━━┓ ┴ ╰───╴ ╭─╯ │ ╰───╴ ┏━┛\n" +
        "  ┗━┱─┴─╴ ┬ ┏━┪ ┏━┓ ┏━┓ ┗━━━━━━━━━┛ ┢━┓ ┏━┓ ┏━┱─╴ ┬ ┴ ┏━┛ ┠───╴ ╭─╯ ┴ ┃   ┃ ├───╴ ╰─╴ ┴ ┃ ┗━╅─╴ │ ┬ ┏━┓ ┏━┓ ┏━┪ ┗━┯━━━┯━━━┛ ┏━┓ ┏━┓ ┢━┱─╯ ╭─╴ ┏━┛  \n" +
        "    ┗━━━━━┪ ┗━┛ ┗━┛ ┗━┹─╴ ╭───╴ ╭─╴ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━┛   ┠─╮ ╭─┴───╴ ┗━━━┩ ╰───┬─────╴ ┃   ┗━━━┷━┪ ┗━┛ ┗━┛ ┗━┹─╴ ╰─╴ ╰───╴ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━┛    \n" +
        "          ┗━┓ ┬ ┏━━━┱─╮ ┏━┷━┓ ┏━┪ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ │ ┬ ╭───╴ ┬ ╰───╴ ╰─┬─┬─╴ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ ┬ ┏━━━━━━━━━━━┛          \n" +
        "            ┠─┤ ┃   ┃ │ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ├─╯ │ │ ╭─╴ ├───────╮ ┴ ╰─╴ ┃               ┃ ┃         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ │ ┗━┯━┛ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╰─╮ ├─┴─╯ ┬ ├─╮ ╭─╴ ╰─╴ ┬ ┬ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ ┴ ┬ ╰─╴ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ╰─┴───╴ ├─╯ ╰─┴───╴ ┬ │ ┢━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━┷━┛                      \n" +
        "            ┗━━━┷━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━┷━━━━━━━━━━━┷━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Right, Bottom, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Right Bottom (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━┯━━━━━━━━━┯━━━━━━━┯━┓                 ┏━┯━━━━━┯━┯━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━╃─╴ ┬ ╰─╴ ╭───╴ ╰───╮ ┬ ┴ ┗━┓       ┏━┯━━━━━┛ ┴ ┬ ┬ ┴ ┴ ┬ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ├─╴ ├───╴ │ ╭─╮ ╭─╴ ╰─┤ ┬ ┬ ┃   ┏━━━┛ ╰───╴ ┏━━━┷━┷━━━━━┪ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ┴ ┬ │ ┬ ╭─╯ │ ╰─┴───╮ ┴ ├─╯ ┃   ┠─╴ ┬ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┩ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┠─╴ ├─╯ ├─╯ ┏━┷━┱─┬─╴ ╰───┴─╴ ┃   ┗━━━┷━╋━━━━━━━━━━━━━━━┯━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱─╴ ┬ ╰─╴ ┬ ┬ ┏━┓ ┏━┓ ┏━┓ ┗━━━┯━┓   ┠─┬─╯ ╭─┴─╮ ┃   ┃ ├─────┬───╮ ┃   ┏━┯━━━┛ ┏━┓ ┏━┓ ┏━┱─╴ ╰───────╴ ┏━┓ ┏━┓ ┏━┓ ┗━┯━━━┓    \n" +
        "  ┏━┩ ╭─╴ ┬ ┗━┩ ┗━┩ ┡━┛ ┏━┷━━━━━┷━┪ ┗━┩ ┗━┛ ┗━┹─╴ ┬ │ ┗━┓ ┃ ╰─┬─┴─╴ ┴ ┗━━━┩ ├───╴ ╰─╮ ┴ ┃ ┏━┛ │ ┬ ┬ ┗━┛ ┗━┩ ┗━┛ ┏━━━━━━━━━┓ ┡━┛ ┗━┛ ┗━┹─╴ ╰─╴ ┗━┓  \n" +
        "┏━┛ │ ├───┴─╮ ├─╴ ┴ ┴ ┬ ┗━━━┓ ┏━━━┹─╴ ╰─┬───┬─────┤ ├─╴ ┗━┹─╴ ┴ ┬ ╭─╮ ┬ ┬ ┴ ╰─┬─┬─╴ ├─╮ ┗━┹─╮ ┴ ├─╯ ╭───╴ ╰─╴ ┬ ┗━━━┓ ┏━━━┛ ├─┬───────╴ ┬ ╭─┬─╴ ┗━┓\n" +
        "┗━┓ ╰─┴───╴ ┴ ╰─────╴ │ ┏━━━┛ ┗━━━┓ ╭─╴ ╰─╴ ┴ ╭─╴ ┴ │ ┬ ┏━┓ ┬ ╭─╯ │ ┴ ┢━┷━┱─╴ │ ├─╮ ┴ │ ┏━┓ ╰─╮ │ ┬ │ ╭─╴ ┬ ╭─╯ ┏━━━┛ ┗━━━┓ ┴ ╰─────╴ ┬ ├─╯ ╰─╴ ┏━┛\n" +
        "  ┗━┱─────╴ ┏━┓ ┏━┓ ┏━┪ ┗━┯━━━━━━━┩ ┢━┓ ┏━┓ ┏━┪ ╭─╴ ┴ ┢━┛ ┠─┤ ├─╴ │ ┬ ┃   ┃ ┬ │ ┴ ╰─╴ ┴ ┃ ┗━┓ ╰─┴─╯ ┢━┪ ┏━┪ ┢━┓ ┗━━━━━━━━━┛ ┏━┓ ┏━┓ ┏━╅─┴───╴ ┏━┛  \n" +
        "    ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ╰───╴ ┬ ┴ ┗━┛ ┗━┛ ┗━┛ ┢━━━━━┛   ┃ ├─┴─┬─┼─┤ ┗━━━┩ │ ├─┬───┬─╴ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┹─────╴ ╭─╴ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┱─╴ ┏━━━┱─╴ ┢━━━┓ ┏━┪ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ ┴ ┬ │ ┴ ╰───╴ ├─┤ │ ├─╴ ┴ ┬ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┢━┱─┤ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ ┬ ┃   ┠─╮ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┠───╯ │ ╭─────╮ │ ┴ ┴ ╰───┬─╯ ┃               ┃ ┃         ┃ ┃ ┃ ┴ ┃                      \n" +
        "            ┃ │ ┗━━━┛ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╭─╴ │ │ ╭─╴ ┴ │ ╭─╮ ╭─╴ ├─╴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┠─╯ ┬ ┬ ┬ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━╅─╴ ╰─┴─┴─╴ ┬ ╰─╯ ┴ │ ┬ ┴ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━┷━┷━┷━━━┛   ┗━┛                             ┗━━━━━━━━━━━┷━━━━━━━┷━┷━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Left, Top, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Left Top (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━┯━━━━━━━━━┯━━━┯━┯━━━┯━┓                 ┏━━━━━━━┯━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ╶─┤ ╭───────┤ ╭─╯ │ ┬ │ ┗━┓       ┏━━━━━━━┛ ╶─╮ ╶─╯ ┬ ╶─┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ╭───┤ ┴ ┬ ╶─┬─┤ ┴ ╭─╯ ╰─╯ ╶─┨   ┏━━━┛ ╶─────┲━━━┷━━━━━┷━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ │ ╶─┤ ┬ ├─╮ ┴ ┴ ┬ │ ┬ ╶─┬───┨   ┃ ╶───┲━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┩ ┗━┩ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ ┴ ┬ ┴ │ ┴ ┢━━━┓ ╰─┤ │ ╶─╯ ┬ ┃   ┗━━━━━╋━━━━━━━━━━━━━━━━━┛ ┡━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━┯━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ┬ ┴ ╶─╯ ╶─┲━┓ ┏━┓ ┏━┓ ┗━┯━━━┓   ┃ ╶─┼───┴─┬─┨   ┃ ┬ │ ├─┬───┼─┨   ┏━━━━━┩ ┏━┓ ┏━┓ ┏━┓ ╶─────╯ ╶─╮ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┛ │ ┬ ╶─┺━┛ ┗━┩ ┗━┩ ┢━┷━━━━━━━┓ ┗━┛ ┗━┩ ┡━┩ ┬ ┴ ┬ ┗━┓ ┃ ┬ ┴ ╶─╮ ┴ ┗━━━┛ │ │ │ ┴ ╭─┤ ┃ ┏━┛ ╭───╯ ┗━┩ ┗━┛ ┗━┛ ┏━━━━━━━━━┪ ┗━┛ ┗━┛ ┡━┩ ╶─────┺━┓  \n" +
        "┏━┛ ╭─╯ ╰─────╮ ┬ │ ┬ ┴ ┗━━━┓ ┏━━━┛ ┬ ┬ ╶─┤ │ ┴ ├───┤ ╶─┺━┛ ├─╮ ╶─┤ ┬ ╶─╮ ┬ ├─╯ ┴ ╶─┤ ┴ ┗━┛ ┬ ┴ ┬ ╶───╯ ╶─┬─╮ ┬ ┗━━━┓ ┏━━━┛ ╶─────╮ ┴ ┴ ╶───┬───┺━┓\n" +
        "┗━┓ ┴ ╶───────┴─┴─╯ │ ╶─┲━━━┛ ┗━━━┓ ╰─┴───╯ ┴ ╶─╯ ┬ ╰─╮ ┏━┓ ┴ │ ┬ │ ├─┲━┷━┪ │ ╶───┬─╯ ╭─┲━┓ ╰───┤ ┬ ┬ ┬ ╶─╯ │ ╰─┲━━━┛ ┗━━━┓ ╶─────┴─╮ ┬ ┬ ╶─╯ ╶─┲━┛\n" +
        "  ┗━┓ ╶─────┲━┓ ┏━┓ ┢━┓ ┗━┯━┯━━━━━┩ ┏━┓ ┏━┓ ┏━┓ ╶─┤ ┬ ┢━┛ ┃ ╶─┴─┴─┴─╯ ┃   ┃ │ ╶───╯ ╶─╯ ┃ ┗━┓ ┬ │ ╰─╆━┪ ┏━┓ ┢━┓ ┡━┯━━━━━━━┩ ┏━┓ ┏━┓ ┢━┪ │ ┬ ╶─┲━┛  \n" +
        "    ┗━━━━━┓ ┗━┩ ┗━┛ ┗━┩ ╶─╯ ┴ ╶───╯ ┗━┛ ┗━┛ ┗━┛ ┏━┷━┷━┛   ┃ ╭───╮ ╶───┺━━━┛ ┴ ╶─┬───────┨   ┗━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ┴ ╶─────╯ ┗━┛ ┗━┛ ┗━┛ ┢━┷━━━┛    \n" +
        "          ┗━┓ ┴ ┏━━━┓ │ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ ┬ ╰─╮ ╶───╮ ╶─────╯ ╭─┬───┨         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ ╶─┲━━━━━━━━━━━┛          \n" +
        "            ┃ ╭─┨   ┃ │ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ┴ │ ┬ │ ┬ ╶─┴─┬─┬───┬─╯ ┴ ╶─┨               ┃ ┃         ┃ ┃ ┃ ┬ ┃                      \n" +
        "            ┃ │ ┡━━━┩ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╶─┴─┤ ├─┴─╮ ┬ ┴ ┴ ╶─╯ ╶─╮ ┬ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ ┴ ┴ ╶─╯ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ╶─┤ ┴ ╶─┤ │ ┬ ┬ ╶───╮ │ ┢━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━┷━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━┷━━━━━┷━┷━┷━┷━━━━━┷━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the sidewinder algorithm (Left, Bottom, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> Sidewinder.createMaze Left Bottom (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━┯━━━━━━━━━┓                 ┏━━━━━┯━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┩ ╶─╮ ┬ ╶─╮ ╶───┤ ╶───┬───╄━┓       ┏━━━━━┯━┛ ╶─╮ ┴ ╶─╮ ╶─┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┴ ┬ ╰─┴─┬─┼─╮ ╶─┤ ╶───┤ ╶─┤ ┃   ┏━┯━┛ ┬ ╶─╯ ┏━━━┷━━━━━┷━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ╶─┤ ┬ ╶─╯ ┴ │ ┬ │ ╶───╯ ╭─╯ ┃   ┃ ┴ ╶─╆━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━┯━┯━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ ╭─┴─┴─╮ ╭─┲━┷━┪ ┴ ┬ ╭───┤ ╭─┨   ┗━━━━━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ╶─╮ ┬ ╶─┲━┓ ┏━┓ ┏━┓ ┗━┯━┯━┓   ┃ ┴ ╭─╮ │ ┴ ┃   ┃ ╶─┼─┤ ╭─╯ │ ┃   ┏━┯━━━┩ ┏━┓ ┏━┓ ┏━┓ ╶───────╮ ╶─┲━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┩ ┬ ╶─╮ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┷━┷━┓ ┗━┩ ┗━┩ ┗━┛ ╭─┤ ┴ ┗━┓ ┃ ╶─╯ ╰─┤ ┬ ┡━━━┛ ┬ │ ┴ ┴ ╶─╯ ┃ ┏━┛ ┴ ╶─╯ ┡━┩ ┗━┛ ┗━┩ ┏━━━━━━━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╶─────┺━┓  \n" +
        "┏━┛ ┴ ├───┴─────╮ ╶─╮ ╶─┺━━━┓ ┏━━━┛ ╭─╯ ╭─╯ ╭─╮ ┴ ┴ ┬ ┬ ┗━┛ ┬ ┬ ╶─┼─┼─╯ ┬ ╶─┤ │ ╶───┬───┺━┛ ╶─╮ ╶───╯ │ ╶───╮ │ ┗━━━┓ ┏━━━┛ ╭───╮ ┬ ┬ ┬ ┬ ╭─────┺━┓\n" +
        "┗━┓ ╶─┤ ╶─────╮ ╰───┤ ╶─┲━━━┛ ┗━━━┓ ┴ ┬ ┴ ╶─╯ ╰─╮ ╭─┤ ╰─┲━┓ ├─┤ ╶─╯ ┴ ┏━┷━┓ ├─┤ ┬ ╶─╯ ┬ ┏━┓ ╶─┤ ┬ ╶───╯ ╶───┴─╯ ┏━━━┛ ┗━━━┓ ┴ ╶─┴─┤ │ │ ╰─╯ ╶───┲━┛\n" +
        "  ┗━┓ ┴ ┬ ╶─┲━┪ ┏━┓ ┢━┓ ┗━┯━━━━━━━┛ ┏━┪ ┏━┓ ┏━┓ ╰─╯ ╰─┲━┛ ┃ │ ╰─╮ ┬ ╶─┨   ┃ ┴ │ │ ╶───┴─┨ ┗━┓ │ ╰───┲━┓ ┏━┓ ┏━┓ ┗━━━┯━━━━━┛ ┏━┓ ┏━┪ ┢━┪ ╶─────┲━┛  \n" +
        "    ┗━━━┷━┓ ┗━┩ ┗━┛ ┗━┛ ┬ ┴ ╶─╮ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ ┴ ┬ │ │ ┬ ┗━━━┛ ┬ ┴ │ ╶─╮ ╶─┨   ┗━┷━━━┓ ┗━┛ ┗━┛ ┗━┛ ╶─╮ ┴ ╶─╮ ╶─┺━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ ┴ ┏━━━┓ ╶─╆━━━┓ ┢━┪ ┢━┓ ┏━┓ ┏━━━━━┛         ┃ ╭─┴─┤ ├─┼─╮ ╶─╮ ╰─┬─┤ ┬ │ ╶─┨         ┗━━━━━┓ ┏━━━━━━━┷━┓ ┏━┪ ╶─┲━━━━━━━━━━━┛          \n" +
        "            ┃ ┬ ┃   ┃ ╶─┨   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ │ ╶─┤ ┴ │ ╰─┬─┴───╯ ╰─┤ ╰───┨               ┃ ┃         ┃ ┃ ┃ ┬ ┃                      \n" +
        "            ┃ ├─┺━━━┛ ┬ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ┴ ╶─┴───╯ ╶─╯ ┬ ┬ ╶─┬─┤ ╶───┺━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ╰─┨                      \n" +
        "            ┃ ┴ ┬ ╶─╮ │ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ╶─────╮ ╶─╮ ╰─┴───╯ │ ╶─┲━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━┷━━━┷━┷━┛   ┗━┛                             ┗━━━━━━━┷━━━┷━━━━━━━━━┷━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze
module Mazes.Render.Tests.Text.BinaryTree.Composite

open System
open FsUnit
open Xunit
open Mazes.Core
open Mazes.Core.Canvas
open Mazes.Core.Grid
open Mazes.Core.Maze.Generate
open Mazes.Render

let savedCanvas =
    "Type=Canvas\n" +
    "-----------*--*---------------*************---------*******--------------\n" +
    "-----------**-*--------------***************----***********--------------\n" +
    "--*******---***--------------***************--******------*-----*--------\n" +
    "-----*--------*-*-*-*--------***************--***---------*-----*--------\n" +
    "-----*******************-----******--*******-----*******************-----\n" +
    "--****-*-*-*******-*-*-****--******--*******--****-*-*-*******-*-*-****--\n" +
    "-***********-----***********-***************-***********-----***********-\n" +
    "**************-*******************************************-**************\n" +
    "-***********-----***********-******--*******-***********-----***********-\n" +
    "--****-*-*-*******-*-*-****--******--*******--****-*-*-*******-*-*-****--\n" +
    "-----*******************-----***************-----*******************-----\n" +
    "------**--**--*-*-*-*--------***************--------*-----*-**-----------\n" +
    "------**--**--*-----*--------***************--------*-----*-**-----------\n" +
    "------******--*-----********************************------*-**-----------\n" +
    "------******--*---------------*************---------------*--------------\n" +
    "end"

let canvas =
    match Canvas.load savedCanvas with
    | Some canvas -> canvas
    | None -> raise(Exception "The saved canvas is not correct")

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Top, Right, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Top Right (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ┬ ╭───╴ ┬ ╭─╴ ╭─╴ ┬ ┬ ┬ ┗━┓       ┏━━━━━━━┹───╴ ╭─────╴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┬ │ ├─╴ ╭─╯ ├───┴───┴─╯ ├─╴ ┃   ┏━━━┹───╴ ┬ ┏━━━━━┷━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┠─┴─╯ ├───╯ ┬ ├───╴ ┬ ┬ ╭─╯ ┬ ┃   ┃ ╭─╴ ┏━━━┷━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ ╭─╴ │ ┬ ┬ ┢━┷━┓ ┬ ├─╯ ├───╯ ┃   ┗━┷━━━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ┬ ╭─╴ ╭─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ │ ┬ │ │ │ ┃   ┃ │ │ ┬ ├───╴ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱───╴ ┬ ╭─╴ ┬ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┛ ┬ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┢━┷━┷━━━┷━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ┬ ┗━┓ ┠─╯ │ ├─┴─╯ ┗━━━┹─┴─┴─┴─┴───╴ ┃ ┏━┹─╴ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━━━┷━┷━━━┪ ┗━┛ ┗━┛ ┗━┹─╴ ╭─╴ ┗━┓  \n" +
        "┏━┛ ╭─┴─┴─╯ ┬ ┬ ╭─╴ ┬ ┬ ┗━━━┓ ┏━━━┹─╴ ┬ ╭─╴ ┬ ╭─┴─╯ ├─╴ ┗━┛ ┬ ├─╯ ╭───╴ ┬ ╭───╴ ╭───╴ ┬ ┗━┹───╴ ├─┴───╴ ┬ ┬ ╭─╴ ┗━━━┓ ┏━━━┹─────╴ ╭───╴ ┬ ├─╴ ┬ ┗━┓\n" +
        "┗━┱─╯ ┬ ╭───╯ ├─╯ ┬ │ │ ┏━━━┛ ┗━━━┓ ╭─╯ ├─╴ │ ├─╴ ┬ │ ┬ ┏━┓ │ ├─╴ │ ┬ ┏━┷━┪ ╭───┴─╴ ┬ │ ┏━┱───╴ ├─╴ ┬ ┬ ├─┴─╯ ┬ ┏━━━┛ ┗━━━┓ ╭─────╯ ┬ ┬ ├─╯ ╭─╯ ┏━┛\n" +
        "  ┗━┓ │ │ ┬ ┏━┪ ┏━┪ ┢━┪ ┗━━━━━━━━━┛ ┢━┓ ┢━┓ ┢━╅─╴ │ │ ┢━┛ ┠─╯ ├─╴ ├─╯ ┃   ┠─┴─╴ ┬ ┬ ├─╯ ┃ ┗━┓ ┬ ├─╴ ┢━┪ ┢━┓ ┏━┪ ┗━━━━━━━━━┛ ┢━┓ ┏━┓ ┢━┪ ├─╴ │ ┏━┛  \n" +
        "    ┗━┷━┷━┪ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ┬ ┬ ╭─╴ ┗━┛ ┗━┛ ┗━┛ ┏━┷━┷━┛   ┃ ┬ ├─╴ ├─╴ ┗━━━┛ ┬ ┬ ├─╯ │ ┬ ┃   ┗━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ╭───────╴ ┗━┛ ┗━┛ ┗━┛ ┢━━━┷━┛    \n" +
        "          ┗━┱─╴ ┏━━━┓ ┬ ┢━┷━┪ ┢━┪ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ ├─┴─╴ │ ╭───╴ ╭─┴─╯ ├─╴ │ │ ┃         ┗━━━━━┓ ┏━━━━━┷━┷━┓ ┏━┓ ┬ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ ┬ ┃   ┠─╯ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ├─╴ ┬ ├─╯ ╭─╴ ├─╴ ╭─┴───╯ │ ┃               ┃ ┃         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┠─╯ ┗━━━┛ ┬ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ │ ┬ ├─┴───╯ ┬ │ ┬ ├─────╴ │ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┠─╯ ┃                      \n" +
        "            ┃ ╭─╴ ┬ ┬ │ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┪ ├─╯ ┬ ╭─╴ ├─╯ │ │ ┬ ╭─╴ ┢━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━┷━━━┷━┷━┷━┛   ┗━┛                             ┗━┷━━━┷━┷━━━┷━━━┷━┷━┷━┷━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Top, Left, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Top Left (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ╶───╮ ╶─────╮ ┬ ┬ ╶─╮ ╶─┺━┓       ┏━━━━━━━┛ ┬ ╶───╮ ┬ ┬ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┬ ╶───┴─╮ ╶───┴─┴─┴─╮ ╰─╮ ╶─┨   ┏━━━┛ ┬ ┬ ╶─┲━┷━━━━━┷━┷━┪ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ │ ╶─╮ ┬ ╰─╮ ┬ ┬ ╶───┤ ┬ ╰───┨   ┃ ┬ ╶─╆━┷━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ │ ╶─┤ │ ┬ ┢━┷━┪ ┬ ┬ ╰─┤ ╶─╮ ┃   ┗━┷━━━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ╶─╮ ┬ ╶───┲━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ ╰───┤ │ │ ┃   ┃ │ │ ┬ │ ┬ │ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╶─╮ ╶─╮ ┬ ┬ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┛ ╶─╮ ╶─┺━┛ ┗━┛ ┗━┛ ┢━━━┷━┷━━━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ╶─┺━┓ ┃ ╶───┴─┴─┴─┺━━━┛ │ ╰─┴─┤ │ ╰─┨ ┏━┛ ┬ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━┷━┷━┪ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ┬ ┗━┓  \n" +
        "┏━┛ ┬ ╶─┤ ┬ ╶───╮ ╶─────┺━━━┓ ┏━━━┛ ╶─╮ ┬ ┬ ╶───┴─┤ ╶───┺━┛ ┬ ╶───╮ ╶───╮ ┬ ╰───╮ ╰─┤ ┬ ┗━┛ ╶─┤ ╰─┴─╮ ┬ ╶─╮ ┬ ╶─┺━━━┓ ┏━━━┛ ┬ ┬ ╶─╮ ┬ ┬ ╰─┴─┴─╮ ┗━┓\n" +
        "┗━┓ ╰─╮ ╰─┤ ┬ ┬ ╰─────╮ ┏━━━┛ ┗━━━┓ ┬ ╰─┴─┤ ┬ ┬ ╶─┤ ╶───┲━┓ │ ┬ ╶─┴───┲━┷━┪ ┬ ┬ │ ╶─┤ │ ┏━┓ ┬ │ ┬ ╶─┤ │ ╶─┤ ╰─╮ ┏━━━┛ ┗━━━┓ │ │ ┬ ╰─┤ ╰───╮ ┬ ╰─┲━┛\n" +
        "  ┗━┓ │ ╶─┤ ┢━┪ ┏━┓ ┏━┪ ┗━━━━━━━━━┛ ┢━┓ ┏━┪ ┢━┪ ╶─┤ ┬ ┏━┛ ┃ ╰─┤ ┬ ┬ ╶─┨   ┃ ╰─┴─┤ ╶─┤ ╰─┨ ┗━┪ │ │ ╶─╆━┪ ┏━┪ ┏━┪ ┗━━━━━━━━━┛ ┢━┪ ┢━┓ ┢━┓ ┬ │ │ ┏━┛  \n" +
        "    ┗━┷━━━┪ ┗━┛ ┗━┛ ┗━┛ ╶───────╮ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━┷━┷━┛   ┃ ┬ │ ╰─┤ ┬ ┗━━━┛ ┬ ╶─┤ ╶─┤ ┬ ┃   ┗━┷━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╶─╮ ┬ ┬ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┢━┷━┷━┛    \n" +
        "          ┗━┓ ┬ ┏━━━┓ ┬ ┏━━━┓ ┏━┪ ┢━┓ ┏━┓ ┏━━━━━┛         ┃ │ ╰─╮ ╰─┴─╮ ╶───┤ ┬ ╰───┤ │ ┃         ┗━━━━━┓ ┏━━━━━━━┷━┪ ┢━┪ ╰─┲━━━━━━━━━━━┛          \n" +
        "            ┃ │ ┃   ┃ │ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ╰───┴─╮ ╶─┤ ╶─╮ ╰─┤ ┬ ╶─┤ ╰─┨               ┃ ┃         ┃ ┃ ┃ ┬ ┃                      \n" +
        "            ┃ │ ┗━━━┛ ╰─┨   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╶─╮ ┬ │ ┬ ╰───┴─╮ │ │ ┬ │ ┬ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ╰─┨                      \n" +
        "            ┃ │ ┬ ┬ ┬ ╶─┨   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ │ ╰─┤ │ ╶─╮ ┬ │ │ ╰─┤ ╰─╆━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━┷━┷━┷━┷━━━┛   ┗━┛                             ┗━┷━━━┷━┷━━━┷━┷━┷━┷━━━┷━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Bottom, Right, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Bottom Right (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━┯━┯━┯━━━━━┯━┯━━━┯━━━┯━┯━┓                 ┏━┯━━━━━━━┯━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ┴ ┴ ├─┬─╮ ┴ ├─╴ ├─╴ ┴ ┴ ┗━┓       ┏━━━┯━━━┛ ╰─────╴ ╰─╴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┠─┬───╴ │ ┴ ╰─╮ ├─╴ ╰─┬─┬─┬─╴ ┃   ┏━┯━╃─╴ ╰─╴ ┏━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ├─┬─╴ ├───╴ ┴ ╰───╮ │ │ ├─╮ ┃   ┃ ┴ ┴ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┩ ┡━┩ ┡━┛ ┗━┛ ┗━━━━━┓         ┃ ┴ ├─╮ ├─╮ ┏━━━┱─╮ │ │ │ │ ┴ ┃   ┗━━━━━╋━━━━━━━━━━━━━┯━┯━┛ ┡━━━┯━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━┯━┯━┩ ┏━┓ ┏━┓ ┏━┱───╴ ┴ ┴ ┴ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━┯━┯━┓   ┠─╮ │ ┴ │ │ ┃   ┃ ┴ ┴ │ ┴ ╰─╴ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┴ ╰─╴ ╰─╴ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━┯━┯━┓    \n" +
        "  ┏━┩ │ │ │ ┡━┛ ┡━┛ ┗━┩ ┏━━━━━━━━━┓ ┗━┛ ┗━┩ ┡━┩ ┴ │ │ ┗━┓ ┃ ┴ ├─╮ ┴ │ ┡━━━┹─┬─╴ ╰─┬─┬─╴ ┃ ┏━╃─────╮ ┡━┛ ┗━┩ ┗━┛ ┏━━━━━━━━━┓ ┡━┩ ┗━┛ ┡━┛ ┴ ┴ │ ┡━┓  \n" +
        "┏━┛ │ ┴ │ ┴ ╰─╴ ├───╴ │ ┗━━━┓ ┏━━━┹───┬─╮ ┴ │ ├─╴ ┴ ├─╴ ┗━┹─╮ │ ├─╴ │ ╰───╴ ├─┬─╴ │ ├─╮ ┗━┛ ├───╮ │ ├───╴ ╰─┬─╮ ┗━━━┓ ┏━━━┛ ┴ ├───╮ ├─┬───╴ │ │ ┗━┓\n" +
        "┗━┓ ╰─╴ ╰─┬───╴ ╰───╴ ┴ ┏━━━┛ ┗━━━┱─╴ ┴ ╰─╴ ┴ ╰─┬─╮ ├─╴ ┏━┓ │ │ ╰─╮ ┴ ┏━━━┓ │ ╰─╴ ┴ │ │ ┏━┓ ╰─╮ ┴ │ ╰─────╴ ┴ ┴ ┏━━━┛ ┗━━━┱─╴ ╰─╴ ┴ ┴ ╰───╮ ┴ ┴ ┏━┛\n" +
        "  ┗━┱───╴ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━┯━┯━┯━━━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ┴ ┏━┛ ┃ ┴ ├─╮ ╰─╮ ┃   ┃ ╰─┬─┬─╮ │ ┴ ┃ ┗━┓ ╰─╴ ┴ ┏━┓ ┏━┓ ┏━┓ ┡━┯━┯━┯━━━┩ ┏━┓ ┏━┓ ┏━┱─╴ ╰─╴ ┏━┛  \n" +
        "    ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ┴ ┴ ╰─╴ ┴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┠─╮ │ ╰─╴ │ ┡━━━┹─╮ ┴ ┴ │ ╰─╮ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ┴ ┴ ╰─╴ │ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┱─╮ ┏━━━┱─╴ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ ├───╮ ┴ ├───╮ ╰───╴ ├─╮ ┴ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ │ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ │ ┃   ┠─╮ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ │ ├─╮ ╰─╴ ╰─╮ ├─┬─┬─╴ ┴ ╰─╮ ┃               ┃ ┃         ┃ ┃ ┃ │ ┃                      \n" +
        "            ┃ ┴ ┡━━━┩ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ┴ │ ├───┬─╮ ┴ │ ┴ ├─┬─┬─╮ ┴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ┴ ┃                      \n" +
        "            ┠─╴ ╰─╴ ┴ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ┴ ╰─╴ ┴ ╰─╴ ╰─╴ ┴ ┴ ┴ ┴ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Bottom, Left, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Bottom Left (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━┯━━━━━━━┯━┯━┯━━━┯━━━┯━┓                 ┏━┯━━━━━┯━┯━┯━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ╶─┤ ╶─────╯ ┴ │ ╶─┤ ╶─┤ ┡━┓       ┏━┯━━━━━┛ ┴ ╶───╯ ┴ ┴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ╭─┬─╯ ╭─┬─┬─────┤ ╭─╯ ╶─┤ ┴ ┃   ┏━━━┩ ┴ ╶───┲━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ┴ │ ╭─┤ │ ┴ ╶───╯ │ ╶─┬─╯ ╭─┨   ┃ ╶─╯ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━┯━┯━┛ ┡━┛ ┡━┛ ┗━┛ ┗━━━━━┓         ┃ ╶─╯ │ │ │ ┏━━━┓ ╭─┤ ╭─┤ ╭─┤ ┃   ┗━━━━━╋━━━━━━━━━━━━━━━┯━┩ ┡━┯━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━┯━┯━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ╶─╯ ╶─╯ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ ╶───╯ ┴ │ ┃   ┃ ┴ ┴ │ │ ┴ │ ┃   ┏━┯━┯━┩ ┏━┓ ┏━┓ ┏━┓ ╶─╯ ┴ ┴ ┴ ╶─┲━┓ ┏━┓ ┏━┓ ┗━┯━┯━┓    \n" +
        "  ┏━┩ │ │ ┴ ┗━┛ ┡━┛ ┗━┩ ┏━━━━━━━━━┓ ┡━┛ ┗━┩ ┗━┛ ╭─┬───┺━┓ ┃ ╭───┬─┬─╯ ┗━┯━┛ ╶─┬─┤ ┴ ╭─┤ ┃ ┏━┛ ┴ │ │ ┗━┩ ┡━┩ ┗━┛ ┏━━━━━━━━━┓ ┗━┩ ┗━┛ ┡━┛ ╭─┤ │ ┡━┓  \n" +
        "┏━┛ ┴ │ │ ╶───┬─┤ ╭───┤ ┗━━━┓ ┏━━━┛ ┴ ╭─┬─╯ ╶───┤ │ ╭───┺━┛ │ ╭─┤ │ ╶───╯ ╶─┬─╯ │ ╶─┤ │ ┗━┛ ╭───┤ ┴ ╶─┤ │ ┴ ╭─┬─┺━━━┓ ┏━━━┛ ╭─┤ ╶───┤ ╶─╯ ┴ │ ┴ ┗━┓\n" +
        "┗━┓ ╶─┤ ┴ ╭───╯ ┴ ┴ ╶─╯ ┏━━━┛ ┗━━━┓ ╶─╯ ┴ ╶─────┤ │ ┴ ╶─┲━┓ │ │ │ ┴ ╶─┲━━━┓ ┴ ╭─╯ ╭─╯ │ ┏━┓ ┴ ╶─┤ ╭───╯ ┴ ╶─╯ ┴ ┏━━━┛ ┗━━━┓ ┴ ┴ ╶───╯ ╶─┬─┬─╯ ╶─┲━┛\n" +
        "  ┗━┓ ┴ ╶─╯ ┏━┓ ┏━┓ ┏━┓ ┡━┯━━━┯━┯━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ╶─┲━┛ ┃ │ ┴ │ ╭─┬─┨   ┃ ╭─╯ ╭─╯ ╭─┤ ┃ ┗━┓ ╶─╯ ┴ ┏━┓ ┏━┓ ┏━┓ ┗━┯━━━┯━┯━┩ ┏━┓ ┏━┓ ┏━┓ ┴ ┴ ╶─┲━┛  \n" +
        "    ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┩ ┴ ┴ ╶─╯ ┴ ┴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ ┴ ╶─┤ ┴ ┴ ┡━┯━┛ ┴ ╭─┤ ╶─┤ ┴ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ╶─╯ ╶─╯ ┴ ┴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ ╭─┲━━━┓ │ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ ╶─┬─┤ ╶───╯ │ ╶─┬─╯ │ ╶─┤ ╭─┨         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ ╶─┲━━━━━━━━━━━┛          \n" +
        "            ┃ ┴ ┃   ┃ │ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ╭─╯ ┴ ╶─┬─┬─┤ ╭─╯ ╶─╯ ╭─┤ │ ┃               ┃ ┃         ┃ ┃ ┃ ╭─┨                      \n" +
        "            ┃ ╶─┺━┯━┩ │ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ┴ ╶─┬───┤ │ ┴ │ ╭─┬─┬─╯ │ ┴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ┴ ┃                      \n" +
        "            ┃ ╶───╯ ┴ ┴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ╶─╯ ╶─╯ ┴ ╶─╯ ┴ ┴ ┴ ╶─╯ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Right, Top, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Right Top (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┹───╴ ┬ ╭───╴ ╭─╴ ╭─────╴ ┗━┓       ┏━━━━━━━┛ ┬ ╭─╴ ┬ ┬ ┬ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┠─────╴ ├─╯ ╭─╴ │ ┬ │ ┬ ╭─╴ ┬ ┃   ┏━━━┛ ┬ ╭─╴ ┏━┷━┷━━━┷━┷━┪ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ┬ ╭─╴ │ ╭─┴─╴ │ ├─┴─┴─╯ ╭─╯ ┃   ┠─╴ ┬ ┢━┷━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┠─╯ ├───┴─╯ ┏━━━╅─┴─╴ ╭─╴ │ ┬ ┃   ┗━━━┷━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┱─────╴ ╭─╴ ┬ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┠───┴─────╴ ┃   ┠─────┴─╴ │ │ ┃   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ╭───╴ ╭─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┹─────╴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┷━━━┪ ┗━┛ ┗━┛ ┗━┹─────╴ ┗━┓ ┃ ╭───╴ ┬ ┬ ┗━━━┛ ┬ ┬ ┬ ┬ │ │ ┃ ┏━┛ ╭───╴ ┗━┛ ┗━┛ ┗━┛ ┢━┷━━━━━┷━┓ ┗━┛ ┗━┛ ┗━┛ ╭─╴ ┬ ┗━┓  \n" +
        "┏━┹─╴ ┬ ┬ ╭─────╴ ╭───╴ ┗━━━┓ ┏━━━┛ ╭───╴ ╭───╴ ┬ ╭─╴ ┬ ┗━┹─┴─╴ ╭─╯ │ ╭───╴ │ ├─╯ │ ├─╯ ┗━┛ ┬ ├─╴ ┬ ┬ ╭─────╴ ┬ ┗━━━┓ ┏━━━┛ ┬ ┬ ╭─╴ ┬ ╭─┴─╴ ├─╴ ┗━┓\n" +
        "┗━┓ ╭─┴─╯ │ ╭─╴ ╭─┴───╴ ┏━━━┛ ┗━━━┱─╯ ╭─╴ ├───╴ ├─┴───╯ ┏━┱───╴ ├───╯ ┢━━━┱─╯ │ ┬ ├─┴─╴ ┏━┓ │ ├─╴ ├─┴─┴─╴ ┬ ╭─╯ ┏━━━┛ ┗━━━┱─╯ │ │ ╭─┴─┴─╴ ╭─╯ ┬ ┏━┛\n" +
        "  ┗━╅─────╯ ┢━┓ ┢━┓ ┏━┓ ┗━━━━━━━━━┛ ┏━┪ ┏━┪ ┏━┓ ├───╴ ┏━┛ ┃ ╭─╴ ├─╴ ┬ ┃   ┃ ┬ ├─┴─┴─╴ ┬ ┃ ┗━╅─┴─╴ │ ┏━┓ ┏━┪ ┢━┓ ┗━━━━━━━━━┛ ┏━┪ ┢━┪ ┏━┱─╴ ├─╴ ┢━┛  \n" +
        "    ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┹─────────╴ ┬ ┗━┛ ┗━┛ ┗━┛ ┢━━━━━┛   ┠─┴─╴ ├─╴ │ ┗━━━┹─┴─┴─╴ ╭───╯ ┃   ┗━━━━━┪ ┗━┛ ┗━┛ ┗━┹───╴ ┬ ┬ ┬ ┬ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━┛    \n" +
        "          ┗━┓ ┬ ┏━━━┱─╴ ┏━━━┓ ┏━┓ ┢━┓ ┏━┓ ┏━━━━━┛         ┠─╴ ┬ ├───╯ ┬ ╭─╴ ┬ ╭─╴ ├───╴ ┃         ┗━━━━━┓ ┏━━━━━━━━━┪ ┢━╅─╯ ┏━━━━━━━━━━━┛          \n" +
        "            ┠─╯ ┃   ┃ ┬ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┠─╴ ├─┴─╴ ╭─╯ ├─╴ ├─╯ ┬ │ ╭─╴ ┃               ┃ ┃         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┃ ┬ ┗━━━┹─╯ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┹───┴─╴ ┬ │ ╭─┴───┴─╴ │ │ ├─╴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ┬ ┃                      \n" +
        "            ┠─╯ ╭─────╴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┱─╴ ╭─┴─╯ ├─╴ ╭─────┴─╯ │ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━┷━┛                      \n" +
        "            ┗━━━┷━━━━━━━┛   ┗━┛                             ┗━━━┷━━━━━┷━━━┷━━━━━━━━━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Right, Bottom, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Right Bottom (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━┯━┯━━━━━┯━━━┯━━━━━┓                 ┏━━━┯━┯━┯━━━┯━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━╃─┬─┬─╴ ┴ ╰─┬─╴ ├─╴ ├─┬─╮ ┡━┓       ┏━┯━━━┯━┹─╴ ┴ ┴ ╰─╴ ┴ ┃                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┴ │ ├───┬─╮ ╰─╴ ├─╮ ┴ ┴ ┴ │ ┃   ┏━━━┛ ╰─╴ ┴ ┏━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┠─╴ ┴ ├─╴ │ ╰───╴ │ ╰─────╴ ┴ ┃   ┠───╴ ┏━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━┯━┯━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┠─┬─╴ ╰─╴ ┴ ┏━━━┓ ╰─────────╮ ┃   ┗━━━━━╋━━━━━━━━━━━━━━━━━┩ ┗━┯━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┴ ╰───────╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ ╰───┬───╴ ┃   ┠─┬─┬───┬─╮ │ ┃   ┏━┯━┯━┩ ┏━┓ ┏━┓ ┏━┱───╴ ╰─╴ ╰─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┹─────╴ ┗━┩ ┗━┩ ┡━┛ ┏━━━━━━━━━┓ ┡━┩ ┡━┛ ┗━┹─┬───╴ ┡━┓ ┠─┬─╴ ╰─┬─╴ ┗━┯━┩ ┴ ├─╮ ┴ ┴ │ ┃ ┏━┛ │ │ ┴ ┗━┩ ┡━┛ ┡━┩ ┏━━━━━━━━━┓ ┗━┛ ┡━┩ ┗━╃─┬─┬─╴ ┗━┓  \n" +
        "┏━┹───┬───┬─╮ ├─╴ │ ├─╴ ┗━━━┓ ┏━━━┛ │ ┴ ╰─┬───╴ ├─┬─╴ │ ┗━┛ ╰───╴ ├───╴ ┴ ╰─╴ ┴ ├───╴ ┴ ┗━┹─╴ │ ╰───╴ │ ├─╮ ┴ ┴ ┗━━━┓ ┏━━━┹─┬─╴ │ ╰─╴ ┴ │ ├───╴ ┗━┓\n" +
        "┗━┱─╴ ├─╮ ┴ ┴ ╰─╴ ┴ ╰─╴ ┏━━━┛ ┗━━━┓ ╰───╴ ╰───╴ ┴ ╰─╴ ┴ ┏━┱─────╮ ╰─╮ ┏━━━┱───╮ ├─┬───╴ ┏━┱─╴ ╰─┬───╴ ┴ ┴ ╰───╴ ┏━━━┛ ┗━━━┓ ╰─╴ ╰─────╴ │ ╰─┬─╴ ┏━┛\n" +
        "  ┗━┓ ┴ ╰─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━━━┯━┛ ┏━┓ ┏━┓ ┏━┱─────╴ ┏━┛ ┠─┬─╴ ╰─╮ ┴ ┃   ┠─╮ ┴ ┴ ╰───╮ ┃ ┗━┱─╴ ╰─╴ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━━━┯━┛ ┏━┓ ┏━┓ ┏━┓ ╰─╴ ┴ ┏━┛  \n" +
        "    ┗━━━━━┓ ┗━┩ ┗━┛ ┗━╃───────╴ ╰─╴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ ╰───╮ ├─╴ ┗━┯━┩ ╰─┬─┬───╮ ┴ ┃   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┹───────╴ ╰─╴ ┗━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ ┴ ┏━━━┓ │ ┏━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┠───╴ │ ╰─┬─╴ │ ╰─╮ │ ├─╴ ╰─╮ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┱─╴ ┏━━━━━━━━━━━┛          \n" +
        "            ┠─╴ ┃   ┃ ┴ ┃   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┠───╴ ╰─╮ ├─╮ ╰─╴ ┴ ┴ ├─┬─╮ ┴ ┃               ┃ ┃         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┠─╮ ┗━┯━┹─╴ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┹─────╴ │ ┴ ╰─┬───┬─╴ ┴ ┴ ╰─╴ ┗━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┠─╴ ┃                      \n" +
        "            ┃ ╰─╴ ╰───╴ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┱───╴ ╰───╴ ╰─╴ ╰───────╴ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Left, Top, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Left Top (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓                 ┏━━━━━━━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┛ ┬ ┬ ╶─╮ ┬ ┬ ╶─────╮ ╶─╮ ┗━┓       ┏━━━━━━━┛ ╶─╮ ┬ ╶─────┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ╶─┤ │ ┬ ╰─┤ │ ┬ ┬ ┬ ╰─╮ ╰─╮ ┃   ┏━━━┛ ╶───╮ ┏━━━┷━┷━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ╶─┤ ╰─┴─╮ ╰─┴─┴─┤ │ ╶─┴─╮ │ ┃   ┃ ╶─╮ ┏━━━┷━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┛ ┗━┛ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ ╶─┤ ╶───┴─┲━━━┓ ╰─┴─╮ ╶─┤ ╰─┨   ┗━━━┷━╋━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╶─╮ ╶───╮ ┬ ┏━┓ ┏━┓ ┏━┓ ┗━━━━━┓   ┃ ┬ │ ╶─────┨   ┃ ╶───┴───┴───┨   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┬ ╶─╮ ╶─────┲━┓ ┏━┓ ┏━┓ ┗━━━━━┓    \n" +
        "  ┏━┛ ┬ ╶─╮ ┗━┛ ┗━┛ ┗━┛ ┏━┷━━━━━┷━┪ ┗━┛ ┗━┛ ┗━┛ ╶───╮ ┗━┓ ┃ │ │ ┬ ┬ ┬ ┗━━━┛ ╶─╮ ┬ ╶───╮ ┃ ┏━┛ ╶─────┺━┛ ┗━┛ ┗━┛ ┢━━━┷━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ╶─────┺━┓  \n" +
        "┏━┛ ╶─┤ ╶─┴─╮ ┬ ╶─╮ ┬ ┬ ┗━━━┓ ┏━━━┛ ┬ ╶─────╮ ┬ ┬ ╶─┤ ┬ ┗━┛ ╰─┤ │ ╰─┤ ┬ ╶───╮ │ ╰─╮ ╶─┴─┺━┛ ┬ ╶─╮ ┬ ╶───╮ ╶───╮ ┗━━━┓ ┏━━━┛ ╶───╮ ╶─────╮ ┬ ┬ ╶─┺━┓\n" +
        "┗━┓ ┬ ╰─╮ ╶─┴─┴─╮ │ │ ╰─┲━━━┛ ┗━━━┓ ╰─╮ ┬ ╶─┴─┴─┤ ╶─┤ │ ┏━┓ ╶─┴─┤ ┬ │ ┢━━━┓ ╰─┴───┤ ╶───┲━┓ ╰───┴─┤ ╶───┤ ╶─╮ ╰─┲━━━┛ ┗━━━┓ ╶───┴─╮ ╶─╮ │ ╰─┴─╮ ┏━┛\n" +
        "  ┗━┪ ╶─┤ ╶─┲━┓ ┢━┪ ┢━┓ ┗━━━━━━━━━┛ ┏━┪ ┢━┓ ┏━┓ │ ╶─┴─╆━┛ ┃ ┬ ╶─┴─┴─┤ ┃   ┃ ┬ ┬ ╶─┤ ╶─╮ ┃ ┗━┓ ╶───┤ ┏━┓ ┢━┓ ┢━┓ ┗━━━━━━━━━┛ ┏━┓ ┏━┪ ┏━┪ ╰─────╆━┛  \n" +
        "    ┗━━━┷━┓ ┗━┛ ┗━┛ ┗━┛ ┬ ┬ ┬ ┬ ╶───┺━┛ ┗━┛ ┗━┛ ┢━━━━━┛   ┃ ╰───╮ ╶─┴─┺━━━┛ ╰─┤ ╶─┤ ╶─┴─┨   ┗━━━━━┪ ┗━┛ ┗━┛ ┗━┛ ┬ ╶─────────┺━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ ╶─┲━━━┓ ╶─╆━┷━┪ ┢━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ ╶─╮ ╰─╮ ┬ ╶─╮ ┬ ╶─┴─╮ │ ╶───┨         ┗━━━━━┓ ┏━━━━━┷━━━┓ ┏━┓ ┬ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ ╶─┨   ┃ ╶─┨   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ┬ │ ┬ ╰─┤ ╶─┤ ╰─╮ ╶─┴─┤ ╶─╮ ┃               ┃ ┃         ┃ ┃ ┃ ╰─┨                      \n" +
        "            ┃ ╶─┺━━━┛ ┬ ┃   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ │ ╰─┴───┴─╮ │ ┬ ╰─────┴───┴─┺━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ┬ ┃                      \n" +
        "            ┃ ╶───────┤ ┃   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┪ ╶─╮ ╶───┤ ╰─┴─────╮ ╶─╮ ┏━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━┷━┛                      \n" +
        "            ┗━━━━━━━━━┷━┛   ┗━┛                             ┗━━━┷━━━━━┷━━━━━━━━━┷━━━┷━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze

[<Fact>]
let ``Rendering a customized composite canvas generated with the binary tree algorithm (Left, Bottom, rng 1) should be like the expected output`` () =
    // arrange
    let maze =
        canvas
        |> Grid.create
        |> BinaryTree.createMaze Left Bottom (Random(1)) 1 1
    
    // act
    let renderedMaze = maze.Grid |> Text.renderGrid
        
    // assert
    let expectedRenderedMaze =
        "                      ┏━┓   ┏━┓                             ┏━┯━━━┯━┯━┯━━━━━━━┯━━━┯━━━┓                 ┏━━━┯━┯━━━━━━━┓                            \n" +
        "                      ┃ ┗━┓ ┃ ┃                           ┏━┩ │ ╶─┤ │ │ ╭─┬───┤ ╶─┤ ╶─┺━┓       ┏━━━┯━┯━┛ ╶─╯ ┴ ╶─────┨                            \n" +
        "    ┏━━━━━━━━━━━━━┓   ┗━┓ ┗━┛ ┃                           ┃ ┴ ┴ ╭─╯ ┴ ┴ │ │ ╶─╯ ╭─┤ ╶─┬─┨   ┏━┯━┛ ╶─╯ ┴ ┏━━━━━━━━━━━┓ ┃         ┏━┓                \n" +
        "    ┗━━━━━┓ ┏━━━━━┛     ┗━━━┓ ┃ ┏━┓ ┏━┓ ┏━┓               ┃ ╭───╯ ╶─────╯ ┴ ╭───┤ ┴ ╭─╯ ┃   ┃ ┴ ╶─┲━━━━━┛           ┃ ┃         ┃ ┃                \n" +
        "          ┃ ┗━━━━━━━━━━━━━━━┩ ┗━┩ ┗━┛ ┗━┛ ┗━━━━━┓         ┃ │ ╭───────┲━━━┓ ┴ ╶─╯ ╶─╯ ╶─┨   ┗━━━━━╋━━━━━━━━━━━━━┯━━━┛ ┗━━━┯━━━━━┛ ┗━━━━━┓          \n" +
        "    ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╶───╯ ╶─╯ ╶─┲━┓ ┏━┓ ┏━┓ ┡━┯━┯━┓   ┃ │ │ ╭─┬───┨   ┃ ╭─┬─────┬───┨   ┏━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ┴ ╶───────╯ ┏━┓ ┏━┓ ┏━┓ ┡━━━━━┓    \n" +
        "  ┏━┛ ╶───┬─╄━┩ ┗━┩ ┡━┛ ┏━━━━━━━━━┓ ┗━┩ ┡━┛ ┡━┩ ┴ ┴ │ ┡━┓ ┃ ┴ │ ┴ ┴ ╭─╄━━━┩ │ ┴ ╶─┬─╯ ╶─┨ ┏━┩ ╭─────╄━┛ ┗━┛ ┡━┩ ┏━━━━━━━━━┓ ┡━┛ ┡━┩ ┗━┩ ┴ ╶───┺━┓  \n" +
        "┏━┛ ╭─────┤ │ ┴ ╶─╯ │ ╶─┺━━━┓ ┏━━━┛ ╭─╯ ┴ ╭─┤ │ ╶───╯ │ ┗━┛ ╶─╯ ╶───┤ ┴ ╶─╯ ┴ ╭───┤ ╶───┺━┛ ┴ │ ╶─┬─┤ ╶───┬─╯ ┴ ┗━━━┓ ┏━━━┛ ┴ ╶─┤ │ ╶─┤ ╭─┬───┬─┺━┓\n" +
        "┗━┓ ┴ ╶─┬─╯ ┴ ╶─────╯ ╶─┲━━━┛ ┗━━━┓ ┴ ╶───╯ ┴ ┴ ╶───┬─╯ ┏━┓ ╶─────┬─┤ ┏━━━┓ ╭─╯ ╭─╯ ╭───┲━┓ ╶─┤ ╶─╯ ┴ ╶───╯ ╶───┲━━━┛ ┗━━━┓ ╶───╯ ┴ ╶─╯ ┴ ┴ ╭─╯ ┏━┛\n" +
        "  ┗━┓ ╶─╯ ╶─┲━┓ ┏━┓ ┏━┓ ┗━━━┯━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╶───╯ ┏━┛ ┃ ╶─┬───╯ ┴ ┃   ┃ ┴ ╭─╯ ╭─╯ ╶─┨ ┗━┓ ┴ ╶───┲━┓ ┏━┓ ┏━┓ ┡━━━┯━━━━━┛ ┏━┓ ┏━┓ ┏━┓ ╶───╯ ┏━┛  \n" +
        "    ┗━━━━━┓ ┗━┩ ┗━┛ ┗━┛ ╶───╯ ╶─────┺━┛ ┗━┛ ┗━┛ ┏━━━━━┛   ┃ ╭─┤ ╶─┬─┬─┺━━━┩ ╭─╯ ╶─┤ ╶─┬─┨   ┗━━━━━┓ ┗━┛ ┗━┛ ┗━┛ ┴ ╶─╯ ╶───┬─┺━┛ ┗━┛ ┗━┛ ┏━━━━━┛    \n" +
        "          ┗━┓ ┴ ┏━━━┓ ╶─┲━━━┓ ┏━┓ ┏━┓ ┏━┓ ┏━━━━━┛         ┃ │ ┴ ╶─┤ │ ╭───┤ ┴ ╭───┤ ╶─╯ ┃         ┗━━━━━┓ ┏━━━━━━━━━┓ ┏━┓ │ ┏━━━━━━━━━━━┛          \n" +
        "            ┃ ╭─┨   ┃ ╶─┨   ┃ ┃ ┗━┛ ┗━┛ ┃ ┃               ┃ ┴ ╭─┬─┤ ┴ ┴ ╶─╯ ╭─┤ ╭─╯ ╶───┨               ┃ ┃         ┃ ┃ ┃ ┴ ┃                      \n" +
        "            ┃ │ ┡━━━┛ ╶─┨   ┃ ┃         ┃ ┗━━━━━━━━━━━━━━━┛ ╶─┤ ┴ │ ╶───┬───╯ ┴ ┴ ╭─────┺━━━━━━━━━━━━━━━╋━┛         ┃ ┃ ┃ ╶─┨                      \n" +
        "            ┃ ┴ ┴ ╶─────┨   ┃ ┃         ┗━━━━━━━━━━━━━━━━━━━┓ ┴ ╶─╯ ╶───╯ ╶───────╯ ╶─┲━━━━━━━━━━━━━━━━━┛           ┃ ┃ ┗━━━┛                      \n" +
        "            ┗━━━━━━━━━━━┛   ┗━┛                             ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                             ┗━┛                            "
        
    renderedMaze |> should equal expectedRenderedMaze